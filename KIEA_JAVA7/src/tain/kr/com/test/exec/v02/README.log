[ How to make pipes work with Runtime.exec()? ]

Consider the following code:

	String commandf = "ls /etc | grep release";
	
	try {
		// execute the command and wait for it to complete
		Process child = Runtime.getRuntime().exec(commandf);
		child.waitFor();
		
		// Print the first 16 bytes of its output
		InputStream i = child.getInputStream();
		byte[] b = new byte[16];
		i.read(b, 0, b.length);
		System.out.println(new String(b));
	} catch (IOException e) {
		e.printStackTrace();
		System.exit(-1);
	}

The program's output is

	/etc:
	adduser.co

When I run from the shell, of course, it works as expected:

	$ ls /etc | grep release
	lsb-release

The internets tell me that, due to the fact that pipe behavior isn't cross-platform,
the brilliant minds who work in the Java factory producing Java can't guarantee that pipes work.

How can I do this?

I am not going to do all of my parsing using Java constructs rather than grep and sed,
because if I want to change the language, I'll be forced to re-write my parsing code
in that language, which is totally a no-go

How can I make Java do piping and redirection when calling shell commands?

----------------------------------------------------------------------------------------------------

Write a script, and execute the script instead of separate commands
Pipe is a part of the shell, so you can also do something like this

	String[] cmd = {
		"/bin/sh",
		"-c",
		"ls /etc | grep release"
	};
	
	Proces p = Runtime.getRuntime().exec(cmd);
	
----------------------------------------------------------------------------------------------------

I ran into a similar problem in Linux, except it was "ps -ef | grep someprocess".
At lease with "ls" you have a language-independent (albeit slower) java replacement

	File f = new File("C:\\");
	String[] files = f.listFiles(new File("/home/tihamer"));
	for (String file : files) {
		if (file.matches(.*some.*)) System.out.println(file);
	}

with "ps", it's a bit harder, because java doesn't seem to have an API for it

I've heard that Sigar might be able to help us: https://support.hyperic.com/display/SIGAR/Home

The simplest solution, however, (as pointed out by Kaj) is to execute the piped command as a string array,
Here is the full code;

	try {
		String line;
		String[] cmd = { "/bin/sh", "-c", "ps -ef | grep export" };
		Process p = Runtime.getRuntime().exec(cmd);
		BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
		while ((line = in.readLine()) != null) {
			System.out.println(line);
		}
		in.close();
	} catch (Exception e) {
		e.printStackTrace();
	}

As to why the String array works with pipe, while a single string does not... it's one of
the mysteries of the universe (especially if you haven't read the source code). I suspect that
it's because when exec is given a single string, it parses it first (in a way that we don't like).
In contrast, when exec is given a string array, it simply passes it on to the operating system
without parsing it.

Actually, if we take time out of busy day and look at the source code

	public Process [....] exec(String command, String[] envp, File dir) throws IOException {
		if (command.length() == 0)
			throw new IllegalArguentException("empty command");
		
		StringTokenizer st = new StringTokenizer(command);
		String[] cmdarray = new String[st.countTokens()];
		for (int i=0; st.hasMoreTokens(); i++)
			cmdarray[i] = st.nextToken();
		return exec(cmdarray, envp, dir);
	}


----------------------------------------------------------------------------------------------------

	public class Ex0129_02 {
		public static void main(String[] args) {
			Runtime rt = Runtime.getRuntime();
			
			try {
				// rt.exec("exlorer.exe " + "http://www.daum.net");
				rt.exec("c:/Program Files/Inetnet Explorer/iexplore.exe " + "http://www.google.co.kr/search?hl=ko&lr=lang-ko&........");
			} catch (IOException e) {}
		}
	}

----------------------------------------------------------------------------------------------------

	// pro = rt.exec("chrome.exe");
	pro = rt.exec("C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\Application\\Chrome.exe");



















